mvec <- makeVector(c(1:5, 50:60))
mvec$get()
mvec$setmean
mvec$setsd
mvec$getmean()
mvec$getsd()
cachemean(mvec)
mvec$get()
mvec$getmean()
mvec$getsd()
cachemean(mvec)
makeVector <- function(x = numeric()) {
m <- NULL
sdev <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
setsd <- function(sd) sdev <<- sd
getsd <- function() sdev
list(set = set, get = get,
setmean = setmean,
getmean = getmean, setsd = setsd, getsd = getsd)
}
cachemean <- function(x, ...) {
m <- x$getmean()
sdev <- x$getsd()
if(!is.null(all(m, sdev)) {
message("getting cached data")
return(c(m, sdev))
}
if(!is.null(sdev)) {
message("getting cached data")
return(sdev)
}
data <- x$get()
m <- mean(data, ...)
sdev <- sd(data, na.rm = TRUE, ...)
x$setmean(m)
x$setsd(sdev)
c(m, sdev)
}
makeVector <- function(x = numeric()) {
m <- NULL
sdev <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
setsd <- function(sd) sdev <<- sd
getsd <- function() sdev
list(set = set, get = get,
setmean = setmean,
getmean = getmean, setsd = setsd, getsd = getsd)
}
cachemean <- function(x, ...) {
m <- x$getmean()
sdev <- x$getsd()
if(!is.null(all(m, sdev))) {
message("getting cached data")
return(c(m, sdev))
}
data <- x$get()
m <- mean(data, ...)
sdev <- sd(data, na.rm = TRUE, ...)
x$setmean(m)
x$setsd(sdev)
c(m, sdev)
}
mvec <- makeVector(c(1:5, 50:60))
mvec$get()
mvec$setmean
mvec$setsd
mvec$getmean()
mvec$getsd()
cachemean(mvec)
makeVector <- function(x = numeric()) {
m <- NULL
sdev <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
setsd <- function(sd) sdev <<- sd
getsd <- function() sdev
list(set = set, get = get,
setmean = setmean,
getmean = getmean, setsd = setsd, getsd = getsd)
}
cachemean <- function(x, ...) {
m <- x$getmean()
sdev <- x$getsd()
if(!is.null(all(m, sdev))) {
message("getting cached data")
stored <- c(m, sdev)
return stored
}
data <- x$get()
m <- mean(data, ...)
sdev <- sd(data, na.rm = TRUE, ...)
x$setmean(m)
x$setsd(sdev)
c(m, sdev)
}
makeVector <- function(x = numeric()) {
m <- NULL
sdev <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
setsd <- function(sd) sdev <<- sd
getsd <- function() sdev
list(set = set, get = get,
setmean = setmean,
getmean = getmean, setsd = setsd, getsd = getsd)
}
cachemean <- function(x, ...) {
m <- x$getmean()
sdev <- x$getsd()
if(!is.null(all(m, sdev))) {
message("getting cached data")
stored <- c(m, sdev)
return (stored)
}
data <- x$get()
m <- mean(data, ...)
sdev <- sd(data, na.rm = TRUE, ...)
x$setmean(m)
x$setsd(sdev)
c(m, sdev)
}
mvec <- makeVector(c(1:5, 50:60))
mvec$get()
mvec$setmean
mvec$setsd
mvec$getmean()
mvec$getsd()
cachemean(mvec)
makeVector <- function(x = numeric()) {
m <- NULL
sdev <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
setsd <- function(sd) sdev <<- sd
getsd <- function() sdev
list(set = set, get = get,
setmean = setmean,
getmean = getmean, setsd = setsd, getsd = getsd)
}
cachemean <- function(x, ...) {
m <- x$getmean()
sdev <- x$getsd()
if(!is.null(m) & !is.null(sdev)) {
message("getting cached data")
stored <- c(m, sdev)
return (stored)
}
data <- x$get()
m <- mean(data, ...)
sdev <- sd(data, na.rm = TRUE, ...)
x$setmean(m)
x$setsd(sdev)
c(m, sdev)
}
mvec <- makeVector(c(1:5, 50:60))
mvec$get()
mvec$setmean
mvec$setsd
mvec$getmean()
mvec$getsd()
cachemean(mvec)
mvec$getmean()
mvec$getsd()
sd(mvec$get())
mat <- matrix(1:12, 3, 4)
mat
dim(mat)
dim[[1]]
dimnames(mat)
dimnames <- c("Rw", "Cl")
mat
mat$Rw
mat$Rw[1]
dimnames
mat <- matrix(1:12, 3, 4)
rownames(mat) <- R1
rownames(mat) <- "Rw1"
nrows(mat)
mat
nrow(mat)
colnames(mat)
solve(mat)
mat <- matrix(list(1, 5, 9, 2, 3, 1, 7, 0, 1), 3, 3)
mat
solve(mat)
mat <- matrix(c(1, 5, 9, 2, 3, 1, 7, 0, 1), 3, 3)
mat
solve(mat)
?return
makeCacheMatrix <- function(x = matrix()) {
if(is.matrix(x) & nrow(x) == ncol(x)) then {
s <- nrow(x)
invMat <- matrix(list(), nrow = s, ncol = s)
set <- function(newmat) {
if(is.matrix(newmat) & nrow(newmat) == ncol(newmat)) then {
x <<- newmat
s <<- nrow(newmat)
invMat <<- matrix(list(), nrow = s, ncol = s)
} else print("Please ensure the input to be a square matrix")
}
get <- function() x
setinv <- function(iMat) {
if(is.matrix(iMat) & nrow(iMat) == ncol(iMat)) then {
invMat <<- iMat
} else print("Please ensure the matrix entered is square")
invMat
}
getinv <- function() invMat
} else print("Please supply a square matrix")
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x, ...) {
invMat <- x$getinv()
if(!is.null(invMat)) {
message("getting cached Inverse")
return(invMat)
}
data <- x$get()
invMat <- solve(data)
x$setinv(invMat)
invMat
}
?if
then
?if then else
??if then else
??if
then
makeCacheMatrix <- function(x = matrix()) {
if(is.matrix(x) & nrow(x) == ncol(x)) {
s <- nrow(x)
invMat <- matrix(list(), nrow = s, ncol = s)
set <- function(newmat) {
if(is.matrix(newmat) & nrow(newmat) == ncol(newmat)) {
x <<- newmat
s <<- nrow(newmat)
invMat <<- matrix(list(), nrow = s, ncol = s)
} else print("Please ensure the input to be a square matrix")
}
get <- function() x
setinv <- function(iMat) {
if(is.matrix(iMat) & nrow(iMat) == ncol(iMat)) {
invMat <<- iMat
} else print("Please ensure the matrix entered is square")
invMat
}
getinv <- function() invMat
list(set = set, get = get, setinv = setinv, getinv = getinv)
} else print("Please supply a square matrix")
}
cacheSolve <- function(x, ...) {
invMat <- x$getinv()
if(!is.null(invMat)) {
message("getting cached Inverse")
return(invMat)
}
data <- x$get()
invMat <- solve(data)
x$setinv(invMat)
invMat
}
mymat <- matrix(list(1, 5, 0, 0, 4, 8, 0, 0, 1), 3, 3)
solve(mymat)
mymat <- as.matrix(mymat)
mymat
solve(mymat)
smat <- matrix(c(1, 5, 0, 0, 4, 8, 0, 0, 1), 3, 3)
solve(smat)
mk <- makeCacheMatrix(smat)
mk$get()
mk$setinv
mk$getinv
mk$setinv()
mk$getinv()
cacheSolve(mk)
is.null(invMat)
is.null(mk$getinv())
mk$getinv()
mk$get()
smat
mk$getinv()
!is.null(mk$getinv())
mymat <- matrix(list(), 3, 3)
mymat
!is.null(mymat)
is.null(mymat)
mymat <- matrix(, 3, 3)
mymat
is.null(mymat)
makeCacheMatrix <- function(x = matrix()) {
if(is.matrix(x) & nrow(x) == ncol(x)) {
s <- nrow(x)
invMat <- as.matrix(matrix(list(), nrow = s, ncol = s))
set <- function(newmat) {
if(is.matrix(newmat) & nrow(newmat) == ncol(newmat)) {
x <<- newmat
s <<- nrow(newmat)
invMat <<- as.matrix(matrix(list(), nrow = s, ncol = s))
} else print("Please ensure the input to be a square matrix")
}
get <- function() x
setinv <- function(iMat) {
if(is.matrix(iMat) & nrow(iMat) == ncol(iMat)) {
invMat <<- iMat
} else print("Please ensure the matrix entered is square")
invMat
}
getinv <- function() invMat
list(set = set, get = get, setinv = setinv, getinv = getinv)
} else print("Please supply a square matrix")
}
cacheSolve <- function(x, ...) {
invMat <- x$getinv()
if(!is.null(invMat)) {
message("getting cached Inverse")
return(invMat)
}
data <- x$get()
invMat <- solve(data)
x$setinv(invMat)
invMat
}
mymat <- matrix(list(), 3, 3)
mymatC <- as.matrix(mymat)
is.null(mymat)
is.null(mymatC)
mymat
smat <- matrix(c(1, 4, 0, 0, 2, 3, 0, 0, 5), 3, 3)
solve(smat)
smat <- matrix(c(1, 4, 0, 0, 2, 3, 1, 0, 5), 3, 3)
solve(smat)
smat <- matrix(c(10, 4, 0, 0, 2, 3, 1, 0, 5), 3, 3)
solve(smat)
smat <- matrix(c(1, 2, 3, 0, 1, 4, 5, 6, 0), 3, 3)
smat
solve(smat)
makeCacheMatrix(smat)
mk <- makeCacheMatrix(smat)
mk$get()
mk$setinv()
mk$setinv
mk$getinv
mk$getinv()
gm <- mk$getinv()
is.null(gm)
is.null(as.matrix(gm))
j1 <- matrix(0, 0, 0)
is.matrix(j1)
is.null(j1)
j1
j2 <- matrix(NULL, 3, 3)
j2 <- matrix(, 3, 3)
is.matrix(j2)
is.null(j2)
j3 <- matrix(list(), 3, 3)
is.matrix(j3)
is.null(j3)
j3
is.null(as.matrix(j3))
j2 <- matrix(list(NULL), 3, 3)
j2
is.null(j2)
?matrix
j4 <- matrix()
is.null(j4)
is.matrix(j4)
as.matrix(j4)
is.na(j4)
is.na(j2)
is.null(unlist(j2))
makeCacheMatrix <- function(x = matrix()) {
if(is.matrix(x) & nrow(x) == ncol(x)) {
s <- nrow(x)
invMat <- matrix(list(), nrow = s, ncol = s)
set <- function(newmat) {
if(is.matrix(newmat) & nrow(newmat) == ncol(newmat)) {
x <<- newmat
s <<- nrow(newmat)
invMat <<- matrix(list(), nrow = s, ncol = s)
} else print("Please ensure the input to be a square matrix")
}
get <- function() x
setinv <- function(iMat) {
if(is.matrix(iMat) & nrow(iMat) == ncol(iMat)) {
invMat <<- iMat
} else print("Please ensure the matrix entered is square")
invMat
}
getinv <- function() invMat
list(set = set, get = get, setinv = setinv, getinv = getinv)
} else print("Please supply a square matrix")
}
cacheSolve <- function(x, ...) {
invMat <- x$getinv()
if(!is.null(unlist(invMat))) {
message("getting cached Inverse")
return(invMat)
}
data <- x$get()
invMat <- solve(data)
x$setinv(invMat)
invMat
}
mymat <- matrix(c(1, 2, 3, 0, 1, 4, 5, 6, 0), 3, 3)
mymat
solve(mymat)
mk <- makeCacheMatrix(mymat)
mk$get()
mk$setinv
mk$setinv()
mk$getinv
mk$getinv()
cacheSolve(mk)
mk$getinv()
xnew <- matrix(c(1, 0, 5, 2, 1, 6, 3, 4, 0), 3, 3)
mk$set(xnew)
mk$get()
xnew
mymat == xnew
mymat
mk$getinv()
mk$get()
cacheSolve(mk)
cacheSolve(mk)
smat <- matrix(c(1, 3, 5, 0), 2, 2)
mk$set(smat)
cacheSolve(mk)
smat <- matrix(1:12, 3, 4)
smat
mk$set(smat)
mk$get()
setwd("~/Coursera/DataScience/GV/ProgrammingAssignment2")
## This file features two main functions -- makeCacheMatrix and
## cacheSolve. The makeCacheMatrix function creates a special
## matrix object that can cache its inverse. The cacheSolve function
## computes the inverse of the special matrix returned by makeCacheMatrix
## outputs the inverse. If the inverse has been already calculated
## (and the matrix hasn't changed), then cacheSolve should retrieve
## the inverse from the cache.
## makeCacheMatrix function takes the input from the user; the input
## needs to be a square matrix, and will display a message if anything
## else is input by the user.
## The makeCachematrix contains four functions set(newmat), get(),
## setinv(iMat) and getinv() which are used to set (or initialize)
## a matrix, get the matrix, set or initialize the inverse matrix
## and get the inverse matrix.
makeCacheMatrix <- function(x = matrix()) {
if(is.matrix(x) & nrow(x) == ncol(x)) {
s <- nrow(x)
invMat <- matrix(list(), nrow = s, ncol = s)
set <- function(newmat) {
if(is.matrix(newmat) & nrow(newmat) == ncol(newmat)) {
x <<- newmat
s <<- nrow(newmat)
invMat <<- matrix(list(), nrow = s, ncol = s)
} else print("Please ensure the input to be a square matrix")
}
get <- function() x
setinv <- function(iMat) {
if(is.matrix(iMat) & nrow(iMat) == ncol(iMat)) {
invMat <<- iMat
} else print("Please ensure the matrix entered is square")
invMat
}
getinv <- function() invMat
list(set = set, get = get, setinv = setinv, getinv = getinv)
} else print("Please supply a square matrix")
}
## cacheSolve function takes the special matrix (from makeCacheMatrix)
## as an argument
cacheSolve <- function(x, ...) {
invMat <- x$getinv()
if(!is.null(unlist(invMat))) {
message("getting cached Inverse")
return(invMat)
}
data <- x$get()
invMat <- solve(data)
x$setinv(invMat)
invMat
}
mymat <- matrix(c(1, 2, 3, 0, 1, 4, 5, 6, 0), 3, 3)
mk <- makeCacheMatrix(mymat)
cacheSolve(mk)
